from pydantic import BaseModel, ConfigDict, EmailStr, Field # Imports BaseModel from Pydantic that we use to define data models for validation which ensures incoming data is the right kind like strings , floats and so on. COnfigDict constructs a dictionary of configuration options. 

# ITEM SCHEMAS
# Creates a class that inherits from BaseModel and determines the item model ensuring required fields of Category, Name and Base_CO2 are included and valid.
class co2_itembase(BaseModel):
    category: str # Category Field Declared as a string
    name: str # Name Field Declared as a string
    base_co2: float # Base_CO2 Field Declared as decimal

# Creates a class that inherits from Item Base and creates a new item ensuring required fields are present.
class co2_createitem(co2_itembase):
    pass

# Creates a class that inherits everything from the CO2ItemCreate and reads the item data but adds fields generated by the database
class co2_itemread(co2_createitem):
    id: int # id Field Declared as an integer
    count: int # Count Field Declared as an integer

# USER SCHEMAS
# Creates a class that inherits from BaseModel and determines the user model ensuring required fields of name and email are included and valid.
class user(BaseModel):
    name: str = Field(..., min_length=4, max_length=20) # Ensures name is not an empty string
    email: EmailStr # Enforces email format

# Creates a class that inherits from User Base and verifies a user ensuring required fields are present plus a password
class ver_user(user):
    password: str # Password Field Declared as a string

# Creates a class that inherits everything from the verified user and reads the data but adds fields generated by the database
class read_user(ver_user):
    id: int # id Field Declared as an integer

# Creates a class that inherits from Base Model to facilitate password changing
class pwd_change(BaseModel):
    old_pwd: str # Old password declared as a string
    new_pwd: str # Old password declared as a string

    model_config = ConfigDict(from_attributes=True) # Pydantic V2 Part where models use a special config dictionary instead ofa class like in v1 to set global options for how the model should behave